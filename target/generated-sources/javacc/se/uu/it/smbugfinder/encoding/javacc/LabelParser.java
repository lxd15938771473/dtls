/* LabelParser.java */
/* Generated By:JavaCC: Do not edit this line. LabelParser.java */
package se.uu.it.smbugfinder.encoding.javacc;

import java.util.*;

import se.uu.it.smbugfinder.encoding.*;

class LabelParser extends AbstractLabelParser implements LabelParserConstants {

  final public Label label() throws ParseException {DescriptionToken description;
    Guard guard = new Guard();
    BooleanExpression expr;
    Update update = new Update();
    description = description();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UPDATE_START:{
      jj_consume_token(UPDATE_START);
      if (jj_2_1(2)) {
        update = update();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          expr = restrictedExpression();
guard = new Guard(expr);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(UPDATE_END);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GUARD_START:{
      jj_consume_token(GUARD_START);
      guard = guard();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(0);
{if ("" != null) return new Label(description, guard, update);}
    throw new Error("Missing return statement in function");
}

  final public Update update() throws ParseException {List<Assignment> assignments = new ArrayList<Assignment >();
     Assignment assignment;
     Update update;
    assignment = assignment();
assignments.add(assignment);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UPDATE_SEP:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(UPDATE_SEP);
      assignment = assignment();
assignments.add(assignment);
    }
update = new Update(assignments);
        {if ("" != null) return update;}
    throw new Error("Missing return statement in function");
}

  final public BooleanExpression restrictedExpression() throws ParseException {Token fieldToken, valToken;
    fieldToken = jj_consume_token(ID);
    jj_consume_token(EQUAL);
    valToken = jj_consume_token(ID);
{if ("" != null) return new RelationalExpression(resolveField(fieldToken.image),  RelationalOperator.EQUAL, resolveConstant(valToken.image) );}
    throw new Error("Missing return statement in function");
}

  final public Assignment assignment() throws ParseException {Token varToken, fieldToken;
    varToken = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    fieldToken = jj_consume_token(ID);
{if ("" != null) return new Assignment(resolveVariable(varToken.image), resolveField(fieldToken.image) );}
    throw new Error("Missing return statement in function");
}

//Guard earlyGuard():
//{
//    Token fieldToken, constToken;
//}
//{
//    fieldToken = < ID >
//    < EQUAL >
//    constToken = < ID >
//    {
//        BinaryBooleanExpression expr = new BinaryBooleanExpression(
//        return new Assignment(resolveVariable(varToken.image), resolveField(fieldToken.image) );
//    }
//}
  final public 
Guard guard() throws ParseException {BooleanExpression expr;
    expr = booleanExpression();
{if ("" != null) return new Guard(expr);}
    throw new Error("Missing return statement in function");
}

  final public BooleanExpression booleanExpression() throws ParseException {BooleanExpression left, right;
    LogicalOperator op;
    left = relationalExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BODY_SEP:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(BODY_SEP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
op = LogicalOperator.AND;
        break;
        }
      case OR:{
        jj_consume_token(OR);
op = LogicalOperator.OR;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(BODY_SEP);
      right = relationalExpression();
left = new BinaryBooleanExpression(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public RelationalExpression relationalExpression() throws ParseException {ValueExpression left = null, right = null;
    RelationalOperator op;
    left = valueExpression();
    jj_consume_token(BODY_SEP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      jj_consume_token(EQUAL);
op = RelationalOperator.EQUAL;
      break;
      }
    case NOT_EQUAL:{
      jj_consume_token(NOT_EQUAL);
op = RelationalOperator.NOT_EQUAL;
      break;
      }
    case IN:{
      jj_consume_token(IN);
op = RelationalOperator.IN;
      break;
      }
    case NOT_IN:{
      jj_consume_token(NOT_IN);
op = RelationalOperator.NOT_IN;
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(BODY_SEP);
    right = valueExpression();
{if ("" != null) return new RelationalExpression(left, op, right);}
    throw new Error("Missing return statement in function");
}

  final public ValueExpression valueExpression() throws ParseException {Token idToken, argToken;
    ValueExpression expression = null, argument = null;
    idToken = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INV_START:{
      jj_consume_token(INV_START);
java.util.List<ValueExpression> arguments = new java.util.ArrayList<ValueExpression>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        argument = valueExpression();
//arguments.add(new Variable(argToken.image));
                arguments.add(argument);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INV_SEP:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_3;
          }
          jj_consume_token(INV_SEP);
          //                argToken = < ID >
          //                {
          //                    arguments.add(new Variable(argToken.image));
          //                }
                          argument = valueExpression();
arguments.add(argument);
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(INV_END);
Function fun = resolveFunction(idToken.image);
            expression = new FunctionInvocation(fun, arguments);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
if (expression == null) {
            expression = resolveValueExpression(idToken.image);
        }
        {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  final public FunctionInvocation invocation() throws ParseException {Token idToken;
    Function fun;
    List<ValueExpression> parameters = new ArrayList<ValueExpression >();
    idToken = jj_consume_token(ID);
fun = resolveFunction(idToken.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INV_START:{
      jj_consume_token(INV_START);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        idToken = jj_consume_token(ID);
parameters.add(new Variable(idToken.image));
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INV_SEP:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
          jj_consume_token(INV_SEP);
          idToken = jj_consume_token(ID);
parameters.add(new Variable(idToken.image));
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(INV_END);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return new FunctionInvocation(fun, parameters);}
    throw new Error("Missing return statement in function");
}

  final public DescriptionToken description() throws ParseException {DescriptionToken left = null;
    SetOperator op = null;
    DescriptionToken right = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENUM_START:{
      left = enumtoken();
      break;
      }
    case FILTER:{
      left = regex();
      break;
      }
    case OTHER:
    case OTHER_INPUT:
    case OTHER_OUTPUT:{
      left = other();
      break;
      }
    case INPUT:
    case OUTPUT:
    case SYMBOL:{
      left = symbol();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(SEP);
      op = setOperator();
      jj_consume_token(SEP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FILTER:{
        right = regex();
        break;
        }
      case ENUM_START:{
        right = enumtoken();
        break;
        }
      case INPUT:
      case OUTPUT:
      case SYMBOL:{
        right = symbol();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
left = new SetExpressionToken(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public SymbolToken symbol() throws ParseException {SymbolToken s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INPUT:{
      s = input();
      break;
      }
    case OUTPUT:{
      s = output();
      break;
      }
    case SYMBOL:{
      s = anySymbol();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  final public SymbolToken input() throws ParseException {Token msgToken;
    msgToken = jj_consume_token(INPUT);
{if ("" != null) return new SymbolToken(true, msgToken.image.substring(2));}
    throw new Error("Missing return statement in function");
}

  final public SymbolToken output() throws ParseException {Token msgToken;
    msgToken = jj_consume_token(OUTPUT);
{if ("" != null) return new SymbolToken(false, msgToken.image.substring(2));}
    throw new Error("Missing return statement in function");
}

  final public SymbolToken anySymbol() throws ParseException {Token msgToken;
    msgToken = jj_consume_token(SYMBOL);
{if ("" != null) return new SymbolToken(msgToken.image);}
    throw new Error("Missing return statement in function");
}

  final public RegexToken regex() throws ParseException {Token regexToken;
    regexToken = jj_consume_token(FILTER);
{if ("" != null) return new RegexToken(regexToken.image.substring(2));}
    throw new Error("Missing return statement in function");
}

  final public OtherToken other() throws ParseException {OtherTokenType otherType = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OTHER:{
      jj_consume_token(OTHER);
otherType = OtherTokenType.ALL;
      break;
      }
    case OTHER_INPUT:{
      jj_consume_token(OTHER_INPUT);
otherType = OtherTokenType.INPUT;
      break;
      }
    case OTHER_OUTPUT:{
      jj_consume_token(OTHER_OUTPUT);
otherType = OtherTokenType.OUTPUT;
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new OtherToken(otherType);}
    throw new Error("Missing return statement in function");
}

  final public EnumerationToken enumtoken() throws ParseException {java.util.List<SymbolToken> symbols = new java.util.ArrayList<SymbolToken>();
    SymbolToken symbol;
    jj_consume_token(ENUM_START);
    symbol = element();
symbols.add(symbol);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENUM_SEP:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(ENUM_SEP);
      symbol = element();
symbols.add(symbol);
    }
    jj_consume_token(ENUM_END);
{if ("" != null) return new EnumerationToken(symbols);}
    throw new Error("Missing return statement in function");
}

  final public SymbolToken element() throws ParseException {Boolean input;
    Token msgToken = null;
    String symbolString = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INPUT_ELEMENT:{
      msgToken = jj_consume_token(INPUT_ELEMENT);
input = true; symbolString = msgToken.image.substring(2);
      break;
      }
    case OUTPUT_ELEMENT:{
      msgToken = jj_consume_token(OUTPUT_ELEMENT);
input = false; symbolString = msgToken.image.substring(2);
      break;
      }
    case SYMBOL_ELEMENT:{
      msgToken = jj_consume_token(SYMBOL_ELEMENT);
input = null; symbolString = msgToken.image;
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new SymbolToken(input, symbolString);}
    throw new Error("Missing return statement in function");
}

  final public SetOperator setOperator() throws ParseException {SetOperator op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIFFERENCE:{
      jj_consume_token(DIFFERENCE);
op = SetOperator.DIFFERENCE;
      break;
      }
    case UNION:{
      jj_consume_token(UNION);
op = SetOperator.UNION;
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return op;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(SEP)) return true;
    if (jj_3R_setOperator_513_5_8()) return true;
    return false;
  }

  private boolean jj_3R_update_124_5_7()
 {
    if (jj_3R_assignment_160_5_9()) return true;
    return false;
  }

  private boolean jj_3R_setOperator_514_9_10()
 {
    if (jj_scan_token(DIFFERENCE)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_update_124_5_7()) return true;
    return false;
  }

  private boolean jj_3R_setOperator_517_13_11()
 {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_setOperator_513_5_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_setOperator_514_9_10()) {
    jj_scanpos = xsp;
    if (jj_3R_setOperator_517_13_11()) return true;
    }
    return false;
  }

  private boolean jj_3R_assignment_160_5_9()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LabelParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x200000,0x80,0x800,0x200,0x400000,0x18000,0x1e0000,0x2000,0x200000,0x1000,0x2000,0x200000,0x1000,0x7f800000,0x63800000,0x21800000,0x1c000000,0x0,0x80000000,0x30,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LabelParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LabelParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LabelParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LabelParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LabelParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LabelParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LabelParser(LabelParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LabelParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[36];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 20; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 36; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
